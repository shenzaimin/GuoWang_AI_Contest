# -*- coding: utf-8 -*-
# @Time     : 2021/9/6 16:39
# @Author   : 宁星星
# @Email    : shenzimin0@gmail.com
from fuzzywuzzy import process
import json
from tqdm import tqdm
import pandas as pd
import collections
import re


def drop_long(df):
    """
    长度大于200,丢掉
    :param df:
    :return:
    """
    df_new = pd.DataFrame()
    targets = list(df["target_text"])
    text_list = list(df["input_text"])
    text_list_new = [text.replace(" ", "") for text in text_list if len(text.replace(" ", "")) <= 200]
    targets_new = [target for text, target in zip(text_list, targets) if len(text.replace(" ", "")) <= 200]
    df_new["input_text"] = text_list_new
    df_new["prefix"] = ["改写"]*len(text_list_new)
    df_new["target_text"] = targets_new
    print(f"丢掉了{len(targets)-len(targets_new)}个长度超过200的样本！")
    return df_new


def delete_white_space(df):
    text_list = list(df["input_text"])
    text_list_new = [C_trans_to_E(text.replace(" ", "")) for text in text_list]
    df["input_text"] = text_list_new
    return df


def split_long_sent(df, max_length=200):
    print("切分长句字！")
    text_list_new = []
    ID_list_new = []
    text_list = list(df["input_text"])
    ID_list = list(df["ID"])
    delima_pattern = "[,.!?]"
    for ID, text in (zip(ID_list, text_list)):
        max_len = max_length
        if len(text) > 200:
            split_pos = []
            tmp_pos = []
            for match in re.finditer(delima_pattern, text):
                pos = match.span()[0]
                if pos <= max_len:
                    tmp_pos.append(pos)
                else:
                    split_pos.append(tmp_pos[-1])
                    max_len += tmp_pos[-1]
            if len(split_pos) == 0:
                text_list_new.append(text)
                ID_list_new.append(ID)
            else:
                start = 0
                ID_idx = 0
                for sp in split_pos:
                    text_list_new.append(text[start:sp+1])
                    ID_list_new.append(f"{ID}-{ID_idx}")
                    start = sp + 1
                    ID_idx += 1
                text_list_new.append(text[split_pos[-1]+1:])
                ID_list_new.append(f"{ID}-{ID_idx}")
        else:
            text_list_new.append(text)
            ID_list_new.append(ID)
    df_new = pd.DataFrame()
    df_new["input_text"] = text_list_new
    df_new["ID"] = ID_list_new
    return df_new


def punctuation_zh2en(df):
    from collections import Counter
    df_trans = pd.DataFrame(columns=["prefix", "input_text", "target_text"])
    df_classify = pd.DataFrame(columns=["prefix", "input_text", "target_text"])
    text_list = list(df["input_text"])
    targets = df["target_text"]
    text_list_trans = []
    targets_trans = []
    text_list_clssify = []
    targets_clssify = []
    for text, target in zip(text_list, targets):
        text_new = text.replace(" ", "")
        text_new_en = C_trans_to_E(text_new)

        text_list_clssify.append(text_new_en)
        if text_new_en == target:
            targets_clssify.append("0")  # 使用规则的样本
        else:
            targets_clssify.append("1")  # 使用模型的样本
            text_list_trans.append(text_new_en)
            targets_trans.append(target)
    # assert len(text_list_trans) == len(text_list_clssify)
    df_trans["input_text"] = text_list_trans
    df_trans["target_text"] = targets_trans
    df_trans["prefix"] = ["改写"]*len(text_list_trans)
    df_trans = add_pinyin_info_2(df_trans)[0]

    df_classify["input_text"] = text_list_clssify
    df_classify["target_text"] = targets_clssify
    df_classify["prefix"] = ["分类"]*len(text_list_clssify)

    input_len_info = sorted(dict(Counter([len(t) for t in df_trans["input_text"]])).items())
    target_len_info = sorted(dict(Counter([len(t) for t in df_trans["target_text"]])).items())
    print(f"max_input_len: {max([len(t) for t in list(df_trans['input_text'])])}")
    print(f"max_target_len: {max([len(t) for t in list(df_trans['target_text'])])}")

    train_all_trans = df_trans.sample(frac=1.0, random_state=2021)
    train_df_trans = train_all_trans.iloc[:int(0.8 * len(train_all_trans))]
    eval_df_trans = train_all_trans.iloc[int(0.8 * len(train_all_trans)):]

    train_all_classify = df_classify.sample(frac=1.0, random_state=2021)
    train_df_classify = train_all_classify.iloc[:int(0.8 * len(train_all_classify))]
    eval_df_classify = train_all_classify.iloc[int(0.8 * len(train_all_classify)):]

    train_df = pd.concat([train_df_trans, train_df_classify])
    eval_df = pd.concat([eval_df_trans, eval_df_classify])
    return train_df, eval_df


def C_trans_to_E(string):
    E_pun = u',.!?()'
    C_pun = u'，。！？（）'
    table = {ord(f): ord(t) for f,t in zip(C_pun, E_pun)}
    return string.translate(table)


def add_pinyin_info(df):
    from pypinyin import lazy_pinyin
    text_list = list(df["input_text"])
    text_list_new = [text+"-"+",".join(lazy_pinyin(text)) for text in text_list]
    df["input_text"] = text_list_new
    return df


def add_pinyin_info_2(df):
    from pypinyin import lazy_pinyin
    import joblib
    text_list = list(df["input_text"])
    hanzi_set = []
    for text in text_list:
        hanzi_set.extend(text)
    hanzi_set = set(hanzi_set)
    # 构建拼音映射
    # pinyin_vocab_dict = dict()
    # for char in hanzi_set:
    #     if '\u4e00' <= char <= '\u9fff':
    #         pinyin_vocab_dict[char] = f"[{lazy_pinyin(char)[0]}]"
    # joblib.dump(pinyin_vocab_dict, "../data/garbageMSG/pinyin_vocab_dict.pkl")
    # pinyin_vocab = sorted(list(set(pinyin_vocab_dict.values())))
    # joblib.dump(pinyin_vocab, "../data/garbageMSG/pinyin_vocab.pkl")

    # 加载拼音映射
    pinyin_vocab_dict = joblib.load("../data/garbageMSG/pinyin_vocab_dict.pkl")
    pinyin_vocab = joblib.load("../data/garbageMSG/pinyin_vocab.pkl")
    text_list_new = []
    update = False
    max_len = 0
    for text in tqdm(text_list):
        text_len = len(text)
        text_new = ""
        for char in text:
            if '\u4e00' <= char <= '\u9fff':
                if char in pinyin_vocab_dict:
                    char_new = pinyin_vocab_dict[char]
                else:
                    update = True
                    pinyin_vocab_dict[char] = f"[{lazy_pinyin(char)[0]}]"
                    char_new = pinyin_vocab_dict[char]
                text_new += char_new
                text_len += 1
            # else:
                # text_new += char
        text_new = text + " | " + text_new
        text_list_new.append(text_new)
        if text_len > max_len:
            max_len = text_len
    if update:
        # 拼音词表有变化，更新
        print("更新拼音词表，存储中...")
        joblib.dump(pinyin_vocab_dict, "../data/garbageMSG/pinyin_vocab_dict.pkl")
        pinyin_vocab = sorted(list(set(pinyin_vocab_dict.values())))
        joblib.dump(pinyin_vocab, "../data/garbageMSG/pinyin_vocab.pkl")

    df["input_text"] = text_list_new
    print(f"加拼音tokentoken后，最大长度为: {max_len}")
    return df, pinyin_vocab


def replace_with_pinyin(df):

    from pypinyin import lazy_pinyin
    import joblib
    text_list = list(df["input_text"])
    hanzi_set = []
    for text in text_list:
        hanzi_set.extend(text)
    hanzi_set = set(hanzi_set)
    # 构建拼音映射
    # pinyin_vocab_dict = dict()
    # for char in hanzi_set:
    #     if '\u4e00' <= char <= '\u9fff':
    #         pinyin_vocab_dict[char] = f"[{lazy_pinyin(char)[0]}]"
    # joblib.dump(pinyin_vocab_dict, "../data/garbageMSG/pinyin_vocab_dict.pkl")
    # pinyin_vocab = sorted(list(set(pinyin_vocab_dict.values())))
    # joblib.dump(pinyin_vocab, "../data/garbageMSG/pinyin_vocab.pkl")

    # 加载拼音映射
    pinyin_vocab_dict = joblib.load("../data/garbageMSG/pinyin_vocab_dict.pkl")
    pinyin_vocab = joblib.load("../data/garbageMSG/pinyin_vocab.pkl")
    text_list_new = []
    update = False
    for text in tqdm(text_list):
        text_new = ""
        for char in text:
            if '\u4e00' <= char <= '\u9fff':
                if char in pinyin_vocab_dict:
                    char_new = pinyin_vocab_dict[char]
                else:
                    update = True
                    pinyin_vocab_dict[char] = f"[{lazy_pinyin(char)[0]}]"
                    char_new = pinyin_vocab_dict[char]
                text_new += char_new
            else:
                text_new += char
        text_list_new.append(text_new)
    if update:
        # 拼音词表有变化，更新
        print("更新拼音词表，存储中...")
        joblib.dump(pinyin_vocab_dict, "../data/garbageMSG/pinyin_vocab_dict.pkl")
        pinyin_vocab = sorted(list(set(pinyin_vocab_dict.values())))
        joblib.dump(pinyin_vocab, "../data/garbageMSG/pinyin_vocab.pkl")

    df["input_text"] = text_list_new
    return df, pinyin_vocab


def reg_replace(train_df):
    print("【使用规则预处理】")
    text_list = train_df["input_text"]
    new_text_list = []
    # digit_pattern = "\d+o+-\d+o+"

    # replace_dict_3 = {
    #     '往芷': '网址',
    #     '萬亼恠': '万人在',
    #     '夭降': '天降',
    #     '墺椚': '澳门',
    #     '傚蒳': '笑纳',
    #     '不卡歀': '不卡款',
    #     '评邰': '平台',
    #     '守寸': '首存',
    #     '经准计划': '精准计划',
    #     '惶⁢館': '皇冠',
    #     '墺⁢菛': '澳门',
    #     '破檞': '破解',
    #     '俻投': '倍投',
    #     '婇篻': '彩票',
    #     '嘿柯計': '黑科技',
    #     '超頞': '超额',
    #     '垨纯凇': '首存送',
    #     'zhang僤呺': '账单号',
    #     '僤呺': '单号',
    #     '亲斤女吴楽': '新娱乐',
    #     '题限': '提现',
    #     '呤棷': '领取',
    #     '墺运': '奥运',
    #     '筯梦': '助梦',
    #     '苞凖': '包准',
    #     '32亓': '32元',
    #     '捌芫': '八元',
    #     '唻熗': '来抢',
    #     '咟萭': '百万',
    #     '葒笣': '红包',
    #     '咟萭葒笣': '百万红包',
    #     '🐉🐅': '龙虎',
    #     '莈鳥倳': '没鸟事',
    #     '莲瀛': '连赢',
    #     '十浨': '十送',
    #     '逾莥莥': '与牛牛',
    #     '惍錵': '金花',
    #     '快鶆': '快来',
    #     '榲砖': '稳赚',
    #     '庪術': '技术',
    #     '嘿课技': '黑科技庪術',
    #     '栳坮子': '老台子',
    #     '乼笧': '注册',
    #     '莓ㄖ': '每日',
    #     '懊運會': '奥运会',
    #     '倛拍': '棋牌',
    #     '盈大将': '赢大奖',
    #     '獍猜': '竞猜',
    #     '殴洲柸': '欧洲杯',
    #     '傪宇': '参与',
    #     '睐著恻': '来注册',
    #     '妽埥': '申请',
    #     '旣妸': '即可',
    #     '朂滈': '最高',
    #     '抟屬': '专属',
    #     '回潰': '回馈',
    #     '憾慁': '感恩',
    #     '丸也有': '玩也有',
    #     '埖落': '花落',
    #     '澫浆尺': '万奖池',
    #     '夜掂': '夜店',
    #     '大浆不断': '大奖不断',
    #     '好蕴': '好运',
    #     '莓入': '每入',
    #     '埴播': '直播',
    #     '拥今': '佣金',
    #     '沖直': '充值',
    #     '叄舆': '参与',
    #     '遨您': '邀您',
    #     '汏瓬氷': '大放水',
    #     '薪亼': '新人',
    #     '倸螵': '彩票',
    #     '睐僚': '来撩',
    #     '今添': '今天',
    #     '舂丰': '春风',
    #     '穩锭': '稳定',
    #     '坮孑': '台子',
    #     '织出ガ': '只出力',
    #     '亞投國际': '亚投国际',
    #     '凨陞氺起': '风生水起',
    #     '体验菳': '体验金',
    #     '╂ν': '加微',
    #     '各種': '各种',
    #     '體岘': '提现',
    #     '偉意國際': '伟意国际',
    #     '特箹': '特约',
    #     '電競': '电竞',
    #     '哫逑': '足球',
    #     '镎斤花': '拿金花',
    #     '手蝣': '手游',
    #     '抱你': '包你',
    #     '础歀': '出款',
    #     '氵主册': '注册',
    #     '嬍砬貨': '微粒贷',
    #     '┼筘': '加Q',
    #     '註⁢冊䕘': '注册领',
    #     '6⁢8⁢0え': '680元',
    #     '见面菳': '见面金',
    #     '萁拍': '棋牌',
    #     '皒补': '我补',
    #     '不夠': '不够',
    #     '額镀': '额度',
    #     '珫稙': '充值',
    #     '筯笧': '注册',
    #     '轌汗銭': '血汗钱',
    #     '壹起': '一起',
    #     '葳泥撕亼': '威尼斯人',
    #     '峟侟': '首存',
    #     '収⁢俐': '收利',
    #     '娴⁢錢': '闲钱',
    #     '分虹': '分红',
    #     '理⁢財': '理财',
    #     '出ガ': '出力',
    #     '稞●聊': '裸聊',
    #     '給沵': '给你',
    #     '杧完了吗': '忙完了吗',
    #     '抠抠峮': 'QQ群',
    #
    #     '壹次性菿': '一次性到',
    #
    #     '汏玶苔': '大平台',
    #     '琣锍': '倍流',
    #
    #     '李品': '礼品',
    #     '自悬': '自选',
    #     '李品自悬': '礼品自选',
    #
    #     '羡治': '限制',
    #     '軨曲': '领取',
    #     '氺栩': '水浴',
    #     '晡迂': '捕鱼',
    #     '唻曲': '来取',
    #     '鸥州柸': '欧洲杯',
    #
    #     '开⁢え': '开元',
    #     '簯⁢簰': '棋牌',
    #
    #     '婇鰾': '彩票',
    #
    #     '紅抱雨': '红包雨',
    #
    #     '珻曰': '每日',
    #
    #     '+皒': '加我',
    #
    #     '栯噫愿': '有意愿',
    #
    #     'ㄖ免丄': '晚上',
    #
    #     '菜碒': '彩金',
    #
    #     '玶邰': '平台',
    #
    #     '椣赞': '点赞',
    #
    #     '添佳': '添加',
    #
    #     '佳茤寶': '加多宝',
    #
    #     '遨請': '邀请',
    #
    #     '数澫': '数万',
    #
    #     '柯計': '合计',
    #
    #     '垨到': '收到',
    #
    #     '戥': '戳',
    #
    #     '匼怍': '合作',
    #
    #     '臥們': '我们',
    #
    #     '岞品': '作品',
    #
    #     '洄聩': '回馈',
    #
    #     '茴潰': '回馈',
    #     '濠礼': '豪礼',
    #
    #     '端吘': '端午',
    #
    #     '兲兲': '天天',
    #
    #     '旣ㄖ': '即日',
    #
    #     '電镜': '电竞',
    #
    #     '垨単': '首单',
    #
    #     '蚪俤炷': '斗地主',
    #
    #     '苌琪': '长期',
    #     '郃怍': '合作',
    #
    #     '汏頟': '大额',
    #     '吳尤': '无忧',
    #
    #     '睬种': '彩种',
    #
    #     '亻言誉': '信誉',
    #
    #     '佺忝': '全天',
    #
    #     '营莉': '盈利',
    #
    #     '縞及': '高级',
    #
    #     '信峪': '信誉',
    #
    #     '倧郃': '综合',
    #
    #     '坽浀': '领取',
    #
    #     '砖署': '专属',
    #
    #     '幸韵': '幸运',
    #
    #     '斤沙': '金沙',
    #
    #     '徕既餸': '来即送',
    #
    #     '男朲': '男人',
    #
    #     '補于': '捕鱼',
    #
    #     '椏愽': '亚博',
    #
    #     '娩费': '免费',
    #     '精隼': '精准',
    #     '一諆': '一期',
    #
    #     '吙瀑': '火爆',
    #
    #     '朂佳': '最佳',
    #
    #     '哖喥': '年度',
    #
    #     '塊素佪': '快速回',
    #
    #     '岨老板': '助老板',
    #
    #     '最汏玶.苔': '最大平台',
    #
    #     '牛寺': '特',
    #     "謓亼": "真人",
    #
    #     "啁楅莉": "周福利",
    #     "楅莉": "福利",
    #
    #     "恪諨": "客服",
    #     "私亼": "私人",
    #
    #     "砖頁铑師": "专业老师",
    #     "砖頁": "专业",
    #     "铑師": "老师",
    #
    #     "爆歷洄樰": "暴力回血",
    #
    #     "莇笧": "注册",
    #
    #     "汏量": "大量",
    #     "佘頞": "余额",
    #     "缇誢": "提现",
    #     "撽请杩": "邀请码",
    #     "琎㪊": "进群",
    #     "推础": "推出",
    #     "幇": "帮",
    #     "短视蘋": "短视频",
    #     "婰赞": "点赞",
    #     "唞喑": "抖音",
    #     "锍畈砽": "留返佣",
    #     "兲天": "天天",
    #     "諆簰": "棋牌",
    #     "每抈": "每月",
    #     "汏闯关": "大闯关",
    #     "吙熱": "火热",
    #     "睞襲": "来袭",
    #
    #     "蒛笁怍": "缺工作",
    #     "笁怍": "工作",
    #
    #     "臥這蒛人": "我这缺人",
    #     "臥這": "我这",
    #     "蒛人": "缺人",
    #
    #     "躰醶": "体验",
    #     "一纤": "一千",
    #     "五纤": "五千",
    #     "嚯憅": "活动",
    #     "莓曰": "每日",
    #     "姿寻": "咨询",
    #     "恪符": "客服",
    #     "掸待": "单带",
    #     "丄汲": "上级",
    #     "什蜜埰矜": "神秘彩铃",
    #     "餸出": "送出",
    #     "婐思": "我司",
    #     "\/1P": "VIP",
    #     "襖椚": "澳门",
    #     "喴苨斯": "威尼斯",
    #     "喴妮伺亼": "威尼斯人",
    #     "歐州柸": "欧洲杯",
    #     "汏倣水": "大放水",
    #     "礻乚": "礼",
    #     "汏 倣 鎹": "大放送",
    #     "烸 ㄖ": "每日",
    #     "ィ本育": "体育",
    #     '岞倳': '做事',
    #     "堢袮": "包你",
    #     "苺天": "每天",
    #     "lθθ": "100",
    #     '珻ㄖ杁': '每日入',
    #     '皇蒄': '皇冠',
    #     "ㄖ": "日",
    #     "噔记": "登记",
    #     "堷短视蘋": "音短视频",
    #     "激埥": "激情",
    #     "汲埥": "激情",
    #     "撽埥": "激情",
    #     "詳埥": "详情",
    #     "详埥": "详情",
    #     "嗨量": "海量",
    #     "埥沵": "请你",
    #     "特莂": "特别",
    #     "洤噺": "全新",
    #     "玶坮": "平台",
    #     "佳莪噺徽": "加我新微",
    #     "不筗": "不中",
    #     "葆蓜": "包赔",
    #     "θ": "0",
    #     "渞啴": "首单",
    #     '锈身才': '秀身材',
    #     '蹛尔': '带你',
    #     '躰棛': '体育',
    #     "啁黏": "周年",
    #     '丄': '上',
    #     '丅': '下',
    #     '拥沪': '用户',
    #     '鈈渟': '不停',
    #     "顽琺": "玩法",
    #     "+矀": "加微",
    #     "茤婡茤淂": "多来多得",
    #     "纯的茤凇的茤": "存的多送的多",
    #     "哽茤": "更多",
    #     "纯的越茤淞的越茤": "存的越多送的越多",
    #     "萿动茤": "活动多",
    #     "茤样": "多样",
    #     "活冻": "活动",
    #     "諆拍": "棋牌",
    #     "茤少": "多少",
    #     "凇諨俐": "送福利",
    #     "よ級": "上级",
    #     "よ綫铃娶": "上线领取",
    #     "ㄎ錢": "亏钱",
    #     "洄樰": "回血",
    #     "嚸我": "点我",
    #     "嚸即": "点击",
    #     "眇到眇提": "秒到秒提",
    #     '幵え': '开元',
    #     "茴愧": "回馈",
    #     '绵妃诵': '免费送',
    #     '每添': '每天',
    #     "澊啍": "尊享",
    #     "澊貴": "尊贵",
    #     "浍園": "会员",
    #     "恁恏": "您好",
    #     "澊敬": "尊敬",
    #     '喴妮伺': '威尼斯',
    #     "┽偶": "加我",
    #     "倪趕來": "你敢来",
    #     "偶趕送": "我敢送",
    #     "老蒒": "老师",
    #     "蔕誺": "带来",
    #     "蔕盈利": "带盈利",
    #     '景凖': '精准',
    #     "在宪发簲": "在线发牌",
    #     "倶軆": "具体",
    #     "埥菿": "请到",
    #     "禸容": "内容",
    #     "砽戶": "用户",
    #     "砽琻": "佣金",
    #     "澫畈": "万返",
    #     "畈砽": "返佣",
    #     "砽唫": "佣金",
    #     "账戶禸": "账户内",
    #     "б": "6",
    #     "錚": "挣",
    #     "ooooo": "00000",
    #     "oooo": "0000",
    #     "ooo": "000",
    #     "ooo-": "000-",
    #     "oo-": "00-",
    #     "1oo": "100",
    #     "2oo": "200",
    #     "3oo": "300",
    #     "4oo": "400",
    #     "5oo": "500",
    #     "6oo": "600",
    #     "7oo": "700",
    #     "8oo": "800",
    #     "9oo": "900",
    #     "ィ本": "体",
    #     "亲斤": "新",
    # }

    replace_dict_4 = {

        '往芷': '网址',
        '萬亼恠': '万人在',
        '夭降': '天降',
        '墺椚': '澳门',
        '傚蒳': '笑纳',
        '不卡歀': '不卡款',
        '评邰': '平台',
        '守寸': '首存',
        '经准计划': '精准计划',
        '惶⁢館': '皇冠',
        '墺⁢菛': '澳门',
        '破檞': '破解',
        '俻投': '倍投',
        '婇篻': '彩票',
        '超頞': '超额',
        '垨纯凇': '首存送',
        'zhang僤呺': '账单号',
        '僤呺': '单号',
        '亲斤女吴楽': '新娱乐',
        '题限': '提现',
        '呤棷': '领取',
        '墺运': '奥运',
        '筯梦': '助梦',
        '苞凖': '包准',
        '32亓': '32元',
        '捌芫': '八元',
        '唻熗': '来抢',
        '咟萭': '百万',
        '葒笣': '红包',
        '咟萭葒笣': '百万红包',
        '🐉🐅': '龙虎',
        '莈鳥倳': '没鸟事',
        '十浨': '十送',
        '逾莥莥': '与牛牛',
        '惍錵': '金花',
        '快鶆': '快来',
        '榲砖': '稳赚',
        '庪術': '技术',
        '嘿课技': '黑科技庪術',
        '栳坮子': '老台子',
        '莓ㄖ': '每日',
        '懊運會': '奥运会',
        '倛拍': '棋牌',
        '盈大将': '赢大奖',
        '獍猜': '竞猜',
        '殴洲柸': '欧洲杯',
        '傪宇': '参与',
        '睐著恻': '来注册',
        '妽埥': '申请',
        '旣妸': '即可',
        '朂滈': '最高',
        '抟屬': '专属',
        '回潰': '回馈',
        '憾慁': '感恩',
        '丸也有': '玩也有',
        '埖落': '花落',
        '澫浆尺': '万奖池',
        '夜掂': '夜店',
        '大浆不断': '大奖不断',
        '埴播': '直播',
        '拥今': '佣金',
        '沖直': '充值',
        '叄舆': '参与',
        '遨您': '邀您',
        '汏瓬氷': '大放水',
        '倸螵': '彩票',
        '睐僚': '来撩',
        '今添': '今天',
        '舂丰': '春风',
        '穩锭': '稳定',
        '坮孑': '台子',
        '亞投國际': '亚投国际',
        '凨陞氺起': '风生水起',
        '体验菳': '体验金',
        '╂ν': '加微',
        '各種': '各种',
        '體岘': '提现',
        '偉意國際': '伟意国际',
        '特箹': '特约',
        '電競': '电竞',
        '哫逑': '足球',
        '镎斤花': '拿金花',
        '氵主册': '注册',
        '┼筘': '加Q',
        '註⁢冊䕘': '注册领',
        '萁拍': '棋牌',
        '額镀': '额度',
        '珫稙': '充值',
        '筯笧': '注册',
        '壹起': '一起',
        '葳泥撕亼': '威尼斯人',
        '峟侟': '首存',
        '収⁢俐': '收利',
        '娴⁢錢': '闲钱',
        '分虹': '分红',
        '理⁢財': '理财',
        '出ガ': '出力',
        '稞●聊': '裸聊',
        '給沵': '给你',
        '杧完了吗': '忙完了吗',
        '抠抠峮': 'QQ群',

        '壹次性菿': '一次性到',

        '汏玶苔': '大平台',
        '琣锍': '倍流',

        '李品': '礼品',
        '自悬': '自选',
        '李品自悬': '礼品自选',

        '軨曲': '领取',
        '氺栩': '水浴',
        '晡迂': '捕鱼',
        '唻曲': '来取',
        '鸥州柸': '欧洲杯',

        '开⁢え': '开元',

        '紅抱雨': '红包雨',

        '珻曰': '每日',

        '+皒': '加我',

        '栯噫愿': '有意愿',

        'ㄖ免丄': '晚上',

        '菜碒': '彩金',

        '玶邰': '平台',

        '椣赞': '点赞',

        '添佳': '添加',

        '佳茤寶': '加多宝',

        '遨請': '邀请',

        '数澫': '数万',

        '柯計': '合计',

        '垨到': '收到',

        '戥': '戳',

        '匼怍': '合作',

        '臥們': '我们',

        '岞品': '作品',

        '洄聩': '回馈',

        '茴潰': '回馈',
        '濠礼': '豪礼',

        '端吘': '端午',

        '兲兲': '天天',

        '旣ㄖ': '即日',

        '電镜': '电竞',

        '垨単': '首单',

        '蚪俤炷': '斗地主',

        '苌琪': '长期',
        '郃怍': '合作',

        '汏頟': '大额',
        '吳尤': '无忧',

        '睬种': '彩种',

        '亻言誉': '信誉',

        '佺忝': '全天',

        '縞及': '高级',

        '信峪': '信誉',

        '倧郃': '综合',

        '坽浀': '领取',

        '砖署': '专属',

        '幸韵': '幸运',

        '斤沙': '金沙',

        '徕既餸': '来即送',

        '男朲': '男人',

        '補于': '捕鱼',

        '椏愽': '亚博',

        '娩费': '免费',
        '精隼': '精准',
        '一諆': '一期',

        '吙瀑': '火爆',

        '朂佳': '最佳',

        '哖喥': '年度',

        '塊素佪': '快速回',

        '岨老板': '助老板',

        '最汏玶.苔': '最大平台',

        '牛寺': '特',
        "謓亼": "真人",

        "啁楅莉": "周福利",
        "楅莉": "福利",

        "恪諨": "客服",
        "私亼": "私人",

        "砖頁铑師": "专业老师",
        "砖頁": "专业",
        "铑師": "老师",

        "爆歷洄樰": "暴力回血",

        "莇笧": "注册",

        "汏量": "大量",
        "佘頞": "余额",
        "缇誢": "提现",
        "撽请杩": "邀请码",
        "琎㪊": "进群",
        "推础": "推出",
        "幇": "帮",
        "短视蘋": "短视频",
        "婰赞": "点赞",
        "唞喑": "抖音",
        "锍畈砽": "留返佣",
        "兲天": "天天",
        "諆簰": "棋牌",
        "每抈": "每月",
        "汏闯关": "大闯关",
        "吙熱": "火热",
        "睞襲": "来袭",

        "蒛笁怍": "缺工作",
        "笁怍": "工作",

        "臥這蒛人": "我这缺人",
        "臥這": "我这",
        "蒛人": "缺人",

        "躰醶": "体验",
        "一纤": "一千",
        "五纤": "五千",
        "嚯憅": "活动",
        "莓曰": "每日",
        "姿寻": "咨询",
        "恪符": "客服",
        "掸待": "单带",
        "丄汲": "上级",
        "什蜜埰矜": "神秘彩铃",
        "餸出": "送出",
        "婐思": "我司",
        "\/1P": "VIP",
        "襖椚": "澳门",
        "喴苨斯": "威尼斯",
        "喴妮伺亼": "威尼斯人",
        "歐州柸": "欧洲杯",
        "汏倣水": "大放水",
        "礻乚": "礼",
        "汏 倣 鎹": "大放送",
        "烸 ㄖ": "每日",
        "ィ本育": "体育",
        '岞倳': '做事',
        "堢袮": "包你",
        "苺天": "每天",
        "lθθ": "100",
        '珻ㄖ杁': '每日入',
        '皇蒄': '皇冠',
        "ㄖ": "日",
        "噔记": "登记",
        "堷短视蘋": "音短视频",
        "激埥": "激情",
        "汲埥": "激情",
        "撽埥": "激情",
        "詳埥": "详情",
        "详埥": "详情",
        "嗨量": "海量",
        "埥沵": "请你",
        "特莂": "特别",
        "洤噺": "全新",
        "玶坮": "平台",
        "佳莪噺徽": "加我新微",
        "不筗": "不中",
        "葆蓜": "包赔",
        "θ": "0",
        "渞啴": "首单",
        '锈身才': '秀身材',
        '蹛尔': '带你',
        '躰棛': '体育',
        "啁黏": "周年",
        '丄': '上',
        '丅': '下',
        '拥沪': '用户',
        '鈈渟': '不停',
        "顽琺": "玩法",
        "+矀": "加微",
        "茤婡茤淂": "多来多得",
        "纯的茤凇的茤": "存的多送的多",
        "哽茤": "更多",
        "纯的越茤淞的越茤": "存的越多送的越多",
        "萿动茤": "活动多",
        "茤样": "多样",
        "活冻": "活动",
        "諆拍": "棋牌",
        "茤少": "多少",
        "凇諨俐": "送福利",
        "よ級": "上级",
        "よ綫铃娶": "上线领取",
        "ㄎ錢": "亏钱",
        "洄樰": "回血",
        "嚸我": "点我",
        "嚸即": "点击",
        "眇到眇提": "秒到秒提",
        '幵え': '开元',
        "茴愧": "回馈",
        '绵妃诵': '免费送',
        '每添': '每天',
        "澊啍": "尊享",
        "澊貴": "尊贵",
        "浍園": "会员",
        "恁恏": "您好",
        "澊敬": "尊敬",
        '喴妮伺': '威尼斯',
        "┽偶": "加我",
        "倪趕來": "你敢来",
        "偶趕送": "我敢送",
        "老蒒": "老师",
        "蔕誺": "带来",
        "蔕盈利": "带盈利",
        '景凖': '精准',
        "在宪发簲": "在线发牌",
        "倶軆": "具体",
        "埥菿": "请到",
        "禸容": "内容",
        "砽戶": "用户",
        "砽琻": "佣金",
        "澫畈": "万返",
        "畈砽": "返佣",
        "砽唫": "佣金",
        "账戶禸": "账户内",
        "б": "6",
        "錚": "挣",
        "ooooo": "00000",
        "oooo": "0000",
        "ooo": "000",
        "ooo-": "000-",
        "oo-": "00-",
        "1oo": "100",
        "2oo": "200",
        "3oo": "300",
        "4oo": "400",
        "5oo": "500",
        "6oo": "600",
        "7oo": "700",
        "8oo": "800",
        "9oo": "900",
        "ィ本": "体",
        "亲斤": "新",

        '铼电': '来电',

        '√ l P': 'VIP',

        '銃值': '充值',

        '等沵': '等你',

        '砽抠抠': '用QQ',

        '咑新飝挺': '打新飞艇',

        '大脍': '大块',

        '涌金': '佣金',

        '啭不停': '赚不停',

        '倸漂': '彩票',

        '怍金埖': '炸金花',

        '赽三': '快三',

        '羙人の秀': '美人的秀',

        '跳傐傐': '跳高高',

        '齐!俳': '棋牌',

        '典仔': '电子',

        '牛牜': '牛牛',

        '崇础': '重出',

        '倥絳': '空降',

        '佺國': '全国',

        '见面啉浀': '见面有礼',

        '劇傢怭備': '居家必备',

        '嗄ㄖ鐴濐': '夏日解暑',

        '纟合': '给',

        '妹女': '美女',

        '永镹': '永久',

        '钜惠': '巨惠',

        '萿勭': '活动',

        '十汏': '十大',

        '走濄': '走过',

        '塨筒': '共同',

        '稿效': '高效',

        '→熷.': '赠',

        '苚戸': '用户',

        '倌祊': '官方',

        '呱呱樂': '刮刮乐',

        '柿_迅': '培训',

        '迩118え蹉': '送188元戳',

        '圎又圎': '圆又圆',

        '仴煷': '月亮',

        '顽踩螵': '玩彩票',

        '啭属': '专属',

        '采彡缥快З': '彩票快3',

        '芬鈡': '分钟',

        '関方': '官方',

        '銶王': '球王',

        '婇可缇': '才可提',

        '睐給我们瓒': '来给我们赞',

        '崎逢怼手': '棋逢对手',

        '荩:27982.cc': '进:27982.cc',

        '仁抿必': '人民币',

        '收溢': '收益',

        '见面菳': '见面金',

        '受撽': '受邀',

        '岭蛐': '领取',

        '6⁢8⁢0え': '680元',

        '三娸': '三期',

        '約-刨': '约炮',

        '蓜姿': '投资',

        '券墒茭昜': '券商交易',

        '股漂': '股票',

        '琮郃胓邰': '综合平台',

        '寀瓢': '彩票',

        '⑦排': '棋牌',

        '塡亼': '真人',

        '電竟': '电竞',

        '軆淯': '体育',

        '哟嚱萴': '爱游戏则',

        '《侑》#《禾兑》&《骠》': '有税票',

        '瑝蒄': '皇冠',

        '葂沸缇拱': '免费提供',

        '一消籽料': '一手资料',

        '内募': '内幕',

        '③蔕': '3带',

        '岼珆': '平台',

        '恛榢': '回家',

        '姙沵指揮': '任你指挥',

        '屚艿屚B': '露奶露B',

        '乼笧': '注册',

        '樶低': '最低',

        '垭博': '亚博',

        '月殳': '股',

        '莲瀛': '连赢',

        '高摷': '高潮',

        '钕艿': '奶',

        '直磻': '直播',

        '嬍砬貨': '微粒贷',

        '铳徝奨賞': '充值奖赏',

        '未妧': '来玩',

        '棌菳': '彩金',

        '耳又': '取',

        '手柱': '首注',

        '白嘉諾': '百家乐',

        '频台': '平台',

        '來垫': '来电',

        '一淼絀': '一水出',

        '指锭': '指定',

        '妸>箹>垉': '可约炮',

        '>裸>窷': '裸聊',

        '婄吕': '赔率',

        '絀头': '出头',

        '洳沵,梾': '如你,来',

        '唧颂沵': '即送你',

        '联盒': '联合',

        '55偣': '55倍',

        '淂.138': '得.138',

        '蕞滴': '最低',

        '馨奇点': '新起点',

        'ホ白咖爍': '百家乐',

        '生萿': '生活',

        '枓咅': '抖音',

        '給ni': '给你',

        '靃徳': '获得',

        '亚俁': '亚娱',

        '不夠': '不够',

        '湘輕': '详情',

        '克棴': '客服',

        '抱你': '包你',

        '伍拾汾钟': '五十分钟',

        '冣888え': '取888元',

        '悇額': '余额',

        '澊擏': '尊敬',

        '6澫': '6万',

        '唫蟾': '金蟾',

        '宵遥国漈': '逍遥国际',

        '淶ba115': '来ba115',

        '块块块': '快快快',

        '倣佰萬': '放百万',

        '狅歡': '狂欢',

        '五仴': '五月',

        '浆池淶': '奖池来',

        '千澫': '千万',

        'ъíе放棄': '别放弃',

        '放sんūī': '放水',

        '薪亼': '新人',

        '涟接': '链接',

        '铨琣': '全倍',

        '捯帐': '到账',

        '刾激': '刺激',

        '齐簰': '棋牌',

        '羙好': '美好',

        '呻晴': '申请',

        '巾💐': '金花',

        '發材': '发财',

        '莲续': '连续',

        '幵跼': '开局',

        '諨梸': '福利',

        '啭運唫🈶': '转运金有',

        '🐟🐮': '鱼牛',

        '凇鸿笣': '送红包',

        '恪呋叩': '客服Q',

        '倯136': '送136',

        '浼推荐': '免推荐',

        '串关': '闯关',

        '琎叺': '进入',

        '氵李品': '水礼品',

        '羡治': '限制',

        '六冲大例': '六重大礼',

        '上@献': '上线',

        '中邱国晴': '中秋国庆',

        '泌藉': '秘籍',

        '莓忝穏瀛': '每天稳赢',

        '芳珐': '方法',

        '植波': '直播',

        '鬥.汼.樂.戰': '斗牛乐战',

        '淲.莊.镓.潶': '虎庄家黑',

        '贚.搶.粨.紅': '龙抢百红',

        '眀媚→': '明媚',

        '儤律': '爆率',

        '拄箣蛉': '注册领',

        '朲笙棏噫儒盡歡': '人生得意须尽欢',

        '缟及': '高级',

        '薪戶必荧': '新户必赢',

        '摪池幵启': '奖池开启',

        '缐上克諨': '线上客服',

        '⁢豪⁢里⁢': '豪礼',

        '倈楲泥撕': '来威尼斯',

        '亼上亼': '人上人',

        '受权': '授权',

        '亓え倛拍': '开元棋牌',

        '正坂': '正版',

        '洧汏禮': '有好礼',

        '記嘚領': '记得领',

        '伽叺': '加入',

        '諆埤': '棋牌',

        '添+': '添加',

        '亏.笋': '亏损',

        '手匆': '首充',

        '大绣': '大秀',

        '实榯菿帐': '实时到账',

        'ㄤ僡': '优惠',

        '嘿柯計': '黑科技',

        '刮奨': '刮奖',

        '祥情': '详情',

        '琎杁': '进入',

        '1佰踭': '1百挣',

        '构物': '购物',

        '瞶宾烩': '贵宾会',

        '值僠': '直播',

        '棢阯': '网址',

        '腿-泍-金': '退本金',

        '陪尝': '赔偿',

        '栢芬栢': '百分百',

        '提攻': '提供',

        '啸納': '笑纳',

        '乫渨': '加微',

        '充惪': '充值',

        '中國蚄': '中国坊',

        '好蕴': '好运',

        '🟥紅': '红红',

        '嘧鎷': '密码',

        '啋凎': '彩金',

        '汧芫': '开元',

        '佪皿': '回血',

        '为恁桻丄': '为您奉上',

        '仴仴': '月月',

        '您呺': '您好',

        '羙籹/枡': '美女升',

        '88翎': '88领',

        '忝忝': '天天',

        '旳呺': '的号',

        '傹技': '竞技',

        '澫人同骀': '万人同台',

        '铼既鎹': '来即送',

        '唞咅': '抖音',

        '恛桖': '回血',

        '小鹅': '小额',

        '孢幢': '保障',

        '营莉': '盈利',

        '唓唓': '车车',

        '飞铤': '飞艇',

        '耘嗵知': '云通知',

        '亱路': '夜路',

        '预粣': '预测',

        '璟准': '精准',

        '莉釿': '礼金',

        '肆个': '四个',

        '乫徵': '加微',

        '荃ㄖ': '全日',

        '克辐': '客服',

        '令页': '领',

        '妖您': '邀您',

        '上瓒': '上赞',

        '枓堷': '抖音',

        '眇醍': '秒提',

        '寀兔凇鉨': '彩兔送你',

        '获丽': '获利',

        '努劦樶': '努力最',

        '倈:': '来:',

        '宔笧颂': '注册送',

        '墺扪': '澳门',

        '妧唭俳': '玩棋牌',

        '娶88': '取88',

        '20洺': '20名',

        '勉婶': '免审',

        '煲賺': '保赚',

        '出亼头地': '出人头地',

        '轌汗銭': '血汗钱',

        '堢伱': '保你',

        '替⁢婕祚⁢亊': '替姐做事',

        '吿吱': '告知',

        '俫啦俫可嘚': '来啦来可得',

        '呮怕志短': '只怕志短',

        '芣啪蕗萇': '不怕路长',

        '瞒佰': '满百',

        '硍溡': '限时',

        '莓入': '每入',

        '萴凇': '则送',

        '忖100': '付100',

        '携掱': '携手',

        '汧沅': '开元',

        '╂ν信': '加微信',

        '徻峟': '会有',

        '努ヵ': '努力',

        '莋澪工': '做零工',

        '亓え簯拍': '开元棋牌',

        '连荭': '连红',

        '汏放送': '大放送',

        '簯⁢簰': '棋牌',

        '９⁢９⁢９⁢え ': '999元',

        '杧完': '忙完',

        '樒犸': '密码',

        '嗵知': '通知',

        '阧喑⁢點⁢瓒': '抖音点赞',

        '织出ガ': '只出力',

        '六盒三': '六合彩',
        "浕茬": "尽在",
        '浕': '进',

        '鉆乾': '赚钱',

        '婇礼': '彩礼',

        '綵緟': '彩种',

        '茤欵': '多款',

        'CP洄桖': 'CP回血',

        '祕招': '秘招',

        '福菜罔': '福彩网',

        '矀柆岱': '微粒贷',

        '仱哖很南': '今年很难',

        '皒补': '我补',

        '苚唫': '佣金',

        '唞愔': '抖音',

        '斿xi': '游戏',

        '放shui': '放水',

        '聆娶': '领取',

        '脍yuan': '会员',

        '値萤': '直营',

        '馆方': '官方',

        '汧芫掑猅': '开元棋牌',

        '氵?主?氵?册?': '注册',

        '竡家': '百家',

        '惍吽': '金牛',

        '遨请杩': '邀请码',

        '亿蕟': '亿发',

        '視蘋': '视频',

        '直滢': '直营',

        '评囵': '评论',

        '祕耤玩琺': '秘籍玩法',

        '啋瓢罫計软键': '彩票逻辑软件',

        'shou存': '首存',

        '手蝣': '手游',

        '蛧阯': '网址',

        '捯胀': '到账',

        '础歀': '存款',

        '芐柱': '下注',

        'と綫睐镎': '上线来拿',

        '把把镎': '把把拿',

        '孒解': '了解',

        '棈痽': '精准',

        '呯珆': '平台',

        '電孒': '电子',

        '滇亼': '真人',

        '茴溃': '回馈',

        '藂浍': '聚会',

        '汏傢': '大家',

        '娯泺': '娱乐',

        '咻娴': '休闲',

        '婇鰾': '彩票'
    }

    # replace_dict_2 = {
    #     '紅抱雨': '红包雨',
    #
    #     '珻曰': '每日',
    #
    #     '+皒': '加我',
    #
    #     '栯噫愿': '有意愿',
    #
    #     'ㄖ免丄': '晚上',
    #
    #     '菜碒': '彩金',
    #
    #     '玶邰': '平台',
    #
    #     '椣赞': '点赞',
    #
    #     '添佳': '添加',
    #
    #     '佳茤寶': '加多宝',
    #
    #     '遨請': '邀请',
    #
    #     '数澫': '数万',
    #
    #     '柯計': '合计',
    #
    #     '垨到': '收到',
    #
    #     '戥': '戳',
    #
    #     '匼怍': '合作',
    #
    #     '臥們': '我们',
    #
    #     '岞品': '作品',
    #
    #     '洄聩': '回馈',
    #
    #     '茴潰': '回馈',
    #     '濠礼': '豪礼',
    #
    #     '端吘': '端午',
    #
    #     '兲兲': '天天',
    #
    #     '旣ㄖ': '即日',
    #
    #     '電镜': '电竞',
    #
    #     '垨単': '首单',
    #
    #     '蚪俤炷': '斗地主',
    #
    #     '苌琪': '长期',
    #     '郃怍': '合作',
    #
    #     '汏頟': '大额',
    #     '吳尤': '无忧',
    #
    #     '睬种': '彩种',
    #
    #     '亻言誉': '信誉',
    #
    #     '佺忝': '全天',
    #
    #     '营莉': '盈利',
    #
    #     '縞及': '高级',
    #
    #     '信峪': '信誉',
    #
    #     '倧郃': '综合',
    #
    #     '坽浀': '领取',
    #
    #     '砖署': '专属',
    #
    #     '幸韵': '幸运',
    #
    #     '斤沙': '金沙',
    #
    #     '徕既餸': '来即送',
    #
    #     '男朲': '男人',
    #
    #     '補于': '捕鱼',
    #
    #     '椏愽': '亚博',
    #
    #     '娩费': '免费',
    #     '精隼': '精准',
    #     '一諆': '一期',
    #
    #     '吙瀑': '火爆',
    #
    #     '朂佳': '最佳',
    #
    #     '哖喥': '年度',
    #
    #     '塊素佪': '快速回',
    #
    #     '岨老板': '助老板',
    #
    #     '最汏玶.苔': '最大平台',
    #
    #     '牛寺': '特',
    #     "謓亼": "真人",
    #
    #     "啁楅莉": "周福利",
    #     "楅莉": "福利",
    #
    #     "恪諨": "客服",
    #     "私亼": "私人",
    #
    #     "砖頁铑師": "专业老师",
    #     "砖頁": "专业",
    #     "铑師": "老师",
    #
    #     "爆歷洄樰": "暴力回血",
    #
    #     "莇笧": "注册",
    #
    #     "汏量": "大量",
    #     "佘頞": "余额",
    #     "缇誢": "提现",
    #     "撽请杩": "邀请码",
    #     "琎㪊": "进群",
    #     "推础": "推出",
    #     "幇": "帮",
    #     "短视蘋": "短视频",
    #     "婰赞": "点赞",
    #     "唞喑": "抖音",
    #     "锍畈砽": "留返佣",
    #     "兲天": "天天",
    #     "諆簰": "棋牌",
    #     "每抈": "每月",
    #     "汏闯关": "大闯关",
    #     "吙熱": "火热",
    #     "睞襲": "来袭",
    #
    #     "蒛笁怍": "缺工作",
    #     "笁怍": "工作",
    #
    #     "臥這蒛人": "我这缺人",
    #     "臥這": "我这",
    #     "蒛人": "缺人",
    #
    #     "躰醶": "体验",
    #     "一纤": "一千",
    #     "五纤": "五千",
    #     "嚯憅": "活动",
    #     "莓曰": "每日",
    #     "姿寻": "咨询",
    #     "恪符": "客服",
    #     "掸待": "单带",
    #     "丄汲": "上级",
    #     "什蜜埰矜": "神秘彩铃",
    #     "餸出": "送出",
    #     "婐思": "我司",
    #     "\/1P": "VIP",
    #     "襖椚": "澳门",
    #     "喴苨斯": "威尼斯",
    #     "喴妮伺亼": "威尼斯人",
    #     "歐州柸": "欧洲杯",
    #     "汏倣水": "大放水",
    #     "礻乚": "礼",
    #     "汏 倣 鎹": "大放送",
    #     "烸 ㄖ": "每日",
    #     "ィ本育": "体育",
    #     '岞倳': '做事',
    #     "堢袮": "包你",
    #     "苺天": "每天",
    #     "lθθ": "100",
    #     '珻ㄖ杁': '每日入',
    #     '皇蒄': '皇冠',
    #     "ㄖ": "日",
    #     "噔记": "登记",
    #     "堷短视蘋": "音短视频",
    #     "激埥": "激情",
    #     "汲埥": "激情",
    #     "撽埥": "激情",
    #     "詳埥": "详情",
    #     "详埥": "详情",
    #     "嗨量": "海量",
    #     "埥沵": "请你",
    #     "特莂": "特别",
    #     "洤噺": "全新",
    #     "玶坮": "平台",
    #     "佳莪噺徽": "加我新微",
    #     "不筗": "不中",
    #     "葆蓜": "包赔",
    #     "θ": "0",
    #     "渞啴": "首单",
    #     '锈身才': '秀身材',
    #     '蹛尔': '带你',
    #     '躰棛': '体育',
    #     "啁黏": "周年",
    #     '丄': '上',
    #     '丅': '下',
    #     '拥沪': '用户',
    #     '鈈渟': '不停',
    #     "顽琺": "玩法",
    #     "+矀": "加微",
    #     "茤婡茤淂": "多来多得",
    #     "纯的茤凇的茤": "存的多送的多",
    #     "哽茤": "更多",
    #     "纯的越茤淞的越茤": "存的越多送的越多",
    #     "萿动茤": "活动多",
    #     "茤样": "多样",
    #     "活冻": "活动",
    #     "諆拍": "棋牌",
    #     "茤少": "多少",
    #     "凇諨俐": "送福利",
    #     "よ級": "上级",
    #     "よ綫铃娶": "上线领取",
    #     "ㄎ錢": "亏钱",
    #     "洄樰": "回血",
    #     "嚸我": "点我",
    #     "嚸即": "点击",
    #     "眇到眇提": "秒到秒提",
    #     '幵え': '开元',
    #     "茴愧": "回馈",
    #     '绵妃诵': '免费送',
    #     '每添': '每天',
    #     "澊啍": "尊享",
    #     "澊貴": "尊贵",
    #     "浍園": "会员",
    #     "恁恏": "您好",
    #     "澊敬": "尊敬",
    #     '喴妮伺': '威尼斯',
    #     "┽偶": "加我",
    #     "倪趕來": "你敢来",
    #     "偶趕送": "我敢送",
    #     "老蒒": "老师",
    #     "蔕誺": "带来",
    #     "蔕盈利": "带盈利",
    #     '景凖': '精准',
    #     "在宪发簲": "在线发牌",
    #     "倶軆": "具体",
    #     "埥菿": "请到",
    #     "禸容": "内容",
    #     "砽戶": "用户",
    #     "砽琻": "佣金",
    #     "澫畈": "万返",
    #     "畈砽": "返佣",
    #     "砽唫": "佣金",
    #     "账戶禸": "账户内",
    #     "б": "6",
    #     "錚": "挣",
    #     "ooooo": "00000",
    #     "oooo": "0000",
    #     "ooo": "000",
    #     "ooo-": "000-",
    #     "oo-": "00-",
    #     "1oo": "100",
    #     "2oo": "200",
    #     "3oo": "300",
    #     "4oo": "400",
    #     "5oo": "500",
    #     "6oo": "600",
    #     "7oo": "700",
    #     "8oo": "800",
    #     "9oo": "900",
    #     "ィ本": "体",
    # }
    # replace_dict = {'既送':'即送',
    # '视屏':'视频',
    # '题示':'提示',
    # '珻ㄖ杁':'每日入',
    # '锈身才':'秀身材',
    # '莓ㄖ':'每日',
    # '岞倳':'做事',
    # '蹛尔':'带你',
    # '飞铤':'飞艇',
    # '躰棛':'体育',
    # '啁':'周',
    # '丄':'上',
    # '丅':'下',
    # '皇蒄':'皇冠',
    # '拥沪':'用户',
    # '鈈渟':'不停',
    # '苔':'台',
    # '茤':'多',
    # '凇':'送',
    # 'よ': '上',
    # '在綫':'在线',
    # '墟':'虚',
    # '幵え':'开元',
    # "茴愧": "回馈",
    # '諆拍':'棋牌',
    # '绵妃诵':'免费送',
    # '每添':'每天',
    # '诀招':'绝招',
    # '澊':'尊',
    # '浍園':'会员',
    # '恁恏':'你好',
    # 'yue':'约',
    # '会园':'会员',
    # '莅玳':'立贷',
    # '喴妮伺':'威尼斯',
    # '┽':'加',
    # '偶':'我',
    # '蒒':'师',
    # '蔕':'带',
    # '齐排':'棋牌',
    # '牛寺':'牛市',
    # '题醒':'提醒',
    # '倈':'来',
    # '理.材':'理财',
    # '景凖':'精准',
    # '在宪':'在线'
    # }
    for i, text in enumerate(tqdm(text_list)):
        text_new = text
        for k, v in replace_dict_4.items():
            text_new = text_new.replace(k, str(v))
        new_text_list.append(text_new)
    train_df["input_text"] = new_text_list
    return train_df


def LCS(str1, str2):
    c = [[0 for i in range(len(str2) + 1)] for j in range(len(str1) + 1)]
    for i in range(1, len(str1) + 1):
        for j in range(1, len(str2) + 1):
            if str1[i - 1] == str2[j - 1]:
                c[i][j] = c[i - 1][j - 1] + 1
            else:
                c[i][j] = max(c[i][j - 1], c[i - 1][j])
    return c[-1][-1]


def choose_top_k_match(string1, string2_list, k=5):
    """
    采用最长公共字串算法从string2_list列表中找出与string1匹配度最高的前k个字符串
    :param string1: 目标字符串
    :param string2_list: 候选字符串列表
    :param k: 输出候选数目
    :return: 匹配度最高的前k个字符串
    """
    candidates = []
    for string2 in string2_list:
        lcs = LCS(string1, string2)
        candidates.append((string2, lcs))
    candidates = sorted(candidates, key=lambda x: x[1], reverse=True)
    if len(candidates) < k:
        return candidates
    else:
        return candidates[:k]


def add_info(samples):
    import sys
    print(sys.path)
    new_samples = []
    cnt_table = dict()
    cnt_column = dict()
    data_list = json.load(open("../data/NL2SQL/CSgSQL/db_schema.json", "r", encoding="utf-8"))
    table_names_map = dict()
    column_names_map = dict()
    table_names_original = data_list[0]["table_names_original"]
    table_names_zh = data_list[0]["table_names"]
    column_names_original = [c[1] for c in data_list[0]["column_names_original"][1:]]
    column_names_zh = [c[1] for c in data_list[0]["column_names"][1:]]
    for t_o, t_zh, c_o, c_zh in zip(table_names_original, table_names_zh, column_names_original, column_names_zh):
        table_names_map[t_zh] = t_o
        column_names_map[c_zh] = c_o
    for i, sample in enumerate(tqdm(samples)):
        text = sample[1]
        label = sample[2]
        table_sim_zh = process.extractBests(text, table_names_map.keys())
        table_sim_en = [table_names_map[t[0]].lower() for t in table_sim_zh]
        table_sim_info = [t[0] for t in table_sim_zh]
        table_sim_en_str = "<pad>".join(table_sim_info)
        column_sim_zh = process.extractBests(text, column_names_map.keys())
        column_sim_en = [column_names_map[t[0]].lower() for t in column_sim_zh]
        column_sim_info = [t[0] for t in column_sim_zh]
        column_sim_en_str = "<pad>".join(column_sim_info)
        text_new = text + "<pad>" + table_sim_en_str + "<pad>" + column_sim_en_str
        new_samples.append(["翻译", text_new, label])

        for en in table_sim_en:
            if en in label:
                cnt_table[i] = cnt_table.get(i, 0) + 1
        if i not in cnt_table:
            cnt_table[i] = 0

        for en in column_sim_en:
            if en in label:
                cnt_column[i] = cnt_column.get(i, 0) + 1
        if i not in cnt_column:
            cnt_column[i] = 0
    print(f"TABLE-MATCH: {cnt_table}\nCOLUMN-MATCH: {cnt_column}")

    return new_samples


def add_info_2(samples, use_lang="中文", k_num=5):
    import sys
    print(sys.path)
    print(f"使用{use_lang}表列信息")

    new_samples = []
    cnt_table = dict()
    cnt_column = dict()
    data_list = json.load(open("../data/NL2SQL/CSgSQL/db_schema.json", "r", encoding="utf-8"))
    table_names_map = dict()
    column_names_map = dict()
    table_names_original = data_list[0]["table_names_original"]
    table_names_zh = data_list[0]["table_names"]
    column_names_original = [c[1] for c in data_list[0]["column_names_original"][1:]]
    column_names_zh = [c[1] for c in data_list[0]["column_names"][1:]]
    # 构建表的中英文映射
    for t_o, t_zh in zip(table_names_original, table_names_zh):
        t_o = t_o.replace("_", " ").lower()
        table_names_map[t_zh] = t_o

    # 构建表列名的中英文映射
    for c_o, c_zh in zip(column_names_original, column_names_zh):
        c_o = c_o.replace("_", " ").lower()
        column_names_map[c_zh] = c_o
    for i, sample in enumerate(tqdm(samples)):
        text = sample[1]
        label = sample[2]
        # table_sim_zh = process.extractBests(text, table_names_map.keys())
        table_sim_zh = choose_top_k_match(text, table_names_map.keys(), k=k_num)
        table_sim_en = [table_names_map[t[0]].lower() for t in table_sim_zh]
        if use_lang == "英文":
            table_sim_info = table_sim_en
        else:
            table_sim_info = [t[0] for t in table_sim_zh]
        # table_sim_info = [t[0] for t in table_sim_zh]
        table_sim_en_str = "<pad>".join(table_sim_info)
        # column_sim_zh = process.extractBests(text, column_names_map.keys())
        column_sim_zh = choose_top_k_match(text, column_names_map.keys(), k=k_num)
        column_sim_en = [column_names_map[t[0]].lower() for t in column_sim_zh]
        if use_lang == "英文":
            column_sim_info = column_sim_en
        else:
            column_sim_info = [t[0] for t in column_sim_zh]
        # column_sim_info = [t[0] for t in column_sim_zh]
        column_sim_en_str = "<pad>".join(column_sim_info)
        text_new = text + "<pad>" + table_sim_en_str + "<pad>" + column_sim_en_str
        new_samples.append(["翻译", text_new, label])

        for en in table_sim_en:
            en = en.replace(" ", "_")
            if en in label:
                cnt_table[i] = cnt_table.get(i, 0) + 1
        if i not in cnt_table:
            cnt_table[i] = 0

        for en in column_sim_en:
            en = en.replace(" ", "_")
            if en in label:
                cnt_column[i] = cnt_column.get(i, 0) + 1
        if i not in cnt_column:
            cnt_column[i] = 0
    print(f"TABLE-MATCH: {cnt_table}\nCOLUMN-MATCH: {cnt_column}")
    print(f"TOTAL-MATCH: TABLE-{sum(list(cnt_table.values()))}, COLUMN-{sum(list(cnt_column.values()))}")

    return new_samples


def add_info_3(samples):
    new_samples = []
    for i, sample in enumerate(tqdm(samples)):
        text = sample[1]
        label = sample[2]
    tables_json = load_json("../data/NL2SQL/CSgSQL/db_schema.json")
    db_id_to_schema_string = {}
    for table_json in tables_json:
        db_id = table_json["db_id"].lower()
        db_id_to_schema_string[db_id] = _get_schema_string(table_json)
    for sample in tqdm(samples):
        source = sample[1]
        target = sample[2]
        db_id = "ai_search"
        schema_string = db_id_to_schema_string[db_id]
        new_source = "%s%s" % (source, schema_string)
        new_samples.append(["翻译", new_source, target])
    return new_samples


def add_info_4(samples, k=10000):
    """
    根据问题与schema匹配，动态生成schema string
    :return:
    """
    new_samples = []
    tables_json = load_json("../data/NL2SQL/CSgSQL/db_schema.json")

    zh2en_map = _get_schema_map(tables_json[0])
    print("动态匹配schema信息...")
    for sample in tqdm(samples[:100]):
        source = sample[1]
        target = sample[2]
        dynamic_schema_zh = choose_top_k_match(source, zh2en_map.keys(), k=k)
        dynamic_schema_en = [zh2en_map[t[0]].lower() for t in dynamic_schema_zh]
        dynamic_schema_en_string = "".join(dynamic_schema_en)
        new_source = "%s%s" % (source, dynamic_schema_en_string.lower())
        target = normalize_whitespace(target)
        new_samples.append(["翻译", new_source, target.lower()])
    return new_samples


def add_info_5(samples, k=10000):
    """
    根据问题与schema匹配，动态生成schema string
    :return:
    """
    new_samples = []
    tables_json = load_json("../data/NL2SQL/CSgSQL/db_schema.json")

    zh2zh_add_en_map = _get_schema_map_2(tables_json[0])
    print("动态匹配schema中英文信息...")
    for sample in tqdm(samples):
        source = sample[1]
        target = sample[2]
        dynamic_schema_zh = choose_top_k_match(source, zh2zh_add_en_map.keys(), k=k)
        dynamic_schema_zh_add_en = [zh2zh_add_en_map[t[0]].lower() for t in dynamic_schema_zh]
        dynamic_schema_zh_add_en_string = "".join(dynamic_schema_zh_add_en)
        new_source = "%s%s" % (source, dynamic_schema_zh_add_en_string.lower())
        target = normalize_whitespace(target)
        new_samples.append(["翻译", new_source, target.lower()])
    return new_samples


def get_table_culumn_vocabs():
    table_culumn_vocabs = []
    tables_json = load_json("../data/NL2SQL/CSgSQL/db_schema.json")[0]
    for table_id, name in tables_json["column_names_original"]:
        if "_" in name:
            table_culumn_vocabs.append(name.lower())
    for table_name in tables_json["table_names_original"]:
        if "_" in table_name:
            table_culumn_vocabs.append(table_name.lower())
    table_culumn_vocabs = sorted(list(set(table_culumn_vocabs)))
    return table_culumn_vocabs


def add_info_cspider(samples, train_dev_json):
    new_samples = []
    examples_json = load_json(train_dev_json)

    tables_json = load_json("../data/NL2SQL/data_cspider/tables.json")
    db_id_to_schema_string = {}
    for table_json in tables_json:
        db_id = table_json["db_id"].lower()
        db_id_to_schema_string[db_id] = _get_schema_string(table_json)

    for example_json in examples_json:
        database = example_json["db_id"]
        source = example_json["question"]
        target = example_json["query"]
        # 加入db_id信息
        source = "%s: %s" % (database, source)
        target = normalize_whitespace(target)

        db_id = database.lower()
        schema_string = db_id_to_schema_string[db_id]
        new_source = "%s%s" % (source, schema_string)
        new_samples.append(["翻译", new_source, target])
    return new_samples


def load_json(filepath):
    with open(filepath, "r", encoding='utf-8') as reader:
        text = reader.read()
    return json.loads(text)


def _get_schema_string(table_json):
    """Returns the schema serialized as a string."""
    table_id_to_column_names = collections.defaultdict(list)
    for table_id, name in table_json["column_names_original"]:
        table_id_to_column_names[table_id].append(name.lower())
    tables = table_json["table_names_original"]

    table_strings = []
    for table_id, table_name in enumerate(tables):
        column_names = table_id_to_column_names[table_id]
        table_string = " | %s : %s" % (table_name.lower(), " , ".join(column_names))
        table_strings.append(table_string)

    return "".join(table_strings)


def _get_schema_map(table_json):
    """Returns the schema serialized as a string."""
    table_id_to_column_names_en = collections.defaultdict(list)
    for table_id, name in table_json["column_names_original"]:
        table_id_to_column_names_en[table_id].append(name.lower())
    table_id_to_column_names_zh = collections.defaultdict(list)
    for table_id, name in table_json["column_names"]:
        table_id_to_column_names_zh[table_id].append(name.lower())

    tables_en = table_json["table_names_original"]
    table_strings_en = []
    for table_id, table_name in enumerate(tables_en):
        column_names_en = table_id_to_column_names_en[table_id]
        table_string_en = " | %s : %s" % (table_name.lower(), " , ".join(column_names_en))
        table_strings_en.append(table_string_en)

    tables_zh = table_json["table_names"]
    table_strings_zh = []
    for table_id, table_name in enumerate(tables_zh):
        column_names_zh = table_id_to_column_names_zh[table_id]
        table_string_zh = " | %s : %s" % (table_name.lower(), " , ".join(column_names_zh))
        table_strings_zh.append(table_string_zh)
    assert len(table_strings_zh) == len(table_strings_en)
    zh2en_map = dict()
    for zh, en in zip(table_strings_zh, table_strings_en):
        zh2en_map[zh] = en
    assert len(zh2en_map) == len(table_strings_zh)

    return zh2en_map


def _get_schema_map_2(table_json):
    """Returns the schema serialized as a string."""
    table_id_to_column_names_en = collections.defaultdict(list)
    for table_id, name in table_json["column_names_original"]:
        table_id_to_column_names_en[table_id].append(name.lower())
    table_id_to_column_names_zh = collections.defaultdict(list)
    for table_id, name in table_json["column_names"]:
        table_id_to_column_names_zh[table_id].append(name.lower())

    tables_en = table_json["table_names_original"]
    table_strings_en = []
    for table_id, table_name in enumerate(tables_en):
        column_names_en = table_id_to_column_names_en[table_id]
        table_string_en = " | %s : %s" % (table_name.lower(), " , ".join(column_names_en))
        table_strings_en.append(table_string_en)

    tables_zh = table_json["table_names"]
    table_strings_zh = []
    for table_id, table_name in enumerate(tables_zh):
        column_names_zh = table_id_to_column_names_zh[table_id]
        table_string_zh = " | %s : %s" % (table_name.lower(), " , ".join(column_names_zh))
        table_strings_zh.append(table_string_zh)

    table_strings_zh_add_en = []
    for table_id, (table_name_zh, table_name_en) in enumerate(zip(tables_zh, tables_en)):
        column_names_zh = table_id_to_column_names_zh[table_id]
        column_names_en = table_id_to_column_names_en[table_id]
        column_names_zh_add_en = []
        for c_zh, c_en in zip(column_names_zh, column_names_en):
            column_names_zh_add_en.append("{c_zh} ( {c_en} )".format(c_zh=c_zh, c_en=c_en))
        table_string_zh_add_en = " | {table_name_zh} ( {table_name_en} ) : {column_names_zh_add_en}".format(table_name_zh=table_name_zh, table_name_en=table_name_en, column_names_zh_add_en=" , ".join(column_names_zh_add_en))
        table_strings_zh_add_en.append(table_string_zh_add_en)

    assert len(table_strings_zh) == len(table_strings_zh_add_en)
    zh2zh_add_en_map = dict()
    for zh, zh_add_en in zip(table_strings_zh, table_strings_zh_add_en):
        zh2zh_add_en_map[zh] = zh_add_en
    assert len(zh2zh_add_en_map) == len(table_strings_zh)

    return zh2zh_add_en_map


def normalize_whitespace(source):
  tokens = source.split()
  return " ".join(tokens)


def post_replace_values(preds_original):
    fix_num = 0
    replace_dict = {
                    "ii线": "Ⅱ线",
                    "i线": "Ⅰ线",
                    }
    preds_fix = []
    for pre in preds_original:
        pre_o = pre
        for k, v in replace_dict.items():
            if k in pre:
                pre = pre.replace(k, v)
        preds_fix.append(pre)
        if pre_o != pre:
            fix_num += 1
            print(f"pre_o: {pre_o}\npre: {pre}")
    print(f"fix_num: {fix_num}")
    return preds_fix


def post_replace_values_2(preds_original):
    fix_num = 0
    replace_dict = {
                    "ii线": "Ⅱ线",
                    "i线": "Ⅰ线",
                    }
    preds_fix = []
    for pre in preds_original:
        pre_o = pre
        for k, v in replace_dict.items():
            if k in pre:
                pre = pre.replace(k, v)
        preds_fix.append(pre)
        if pre_o != pre:
            fix_num += 1
            print(f"pre_o: {pre_o}\npre: {pre}")
    print(f"fix_num: {fix_num}")
    return preds_fix


if __name__ == '__main__':

    train_data = []
    data_list = json.load(open("../../data/NL2SQL/CSgSQL/train.json", "r", encoding="utf-8"))
    for data in data_list:
        text = data["question"]
        label = data["query"]
        q_id = data["question_id"]
        sample = [q_id, text, label]
        train_data.append(sample)
    # cnt_table = dict()
    # cnt_column = dict()
    # for sample in train_data:
    #     q_id = sample[0]
    #     text = sample[1]
    #     label = sample[2]
    #     table_sim_zh = process.extractBests(text, table_names_map.keys())
    #     table_sim_en = [table_names_map[t[0]] for t in table_sim_zh]
    #     for en in table_sim_en:
    #         if en in label:
    #             cnt_table[q_id] = cnt_table.get(q_id, 0) + 1
    #     if q_id not in cnt_table:
    #         cnt_table[q_id] = 0
    #
    #     column_sim_zh = process.extractBests(text, column_names_map.keys())
    #     column_sim_en = [column_names_map[t[0]] for t in column_sim_zh]
    #     for en in column_sim_en:
    #         if en in label:
    #             cnt_column[q_id] = cnt_column.get(q_id, 0) + 1
    #     if q_id not in cnt_column:
    #         cnt_column[q_id] = 0
    # print(cnt_column)
    new_train_data = add_info(train_data)
    print(1)